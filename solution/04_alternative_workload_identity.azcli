#Still need to create KV

KEYVAULT_NAME=kv-$APPNAME-$UNIQUEID
az keyvault create \
    --name $KEYVAULT_NAME \
    --resource-group $RESOURCE_GROUP \
    --location $LOCATION \
    --sku standard

#coach guide: executing some az cli statements from a GH codespace to the Azure environment, might be blocked by the Microsoft tenant. To bypass this restriction, guide the learners to use the Cloud Shell for these specific statements. 

# These 2 can probably be removed
# az keyvault secret set \
#     --name SPRING-DATASOURCE-USERNAME \
#     --value myadmin \
#     --vault-name $KEYVAULT_NAME
   
# az keyvault secret set \
#     --name SPRING-DATASOURCE-PASSWORD \
#     --value $MYSQL_ADMIN_PASSWORD \
#     --vault-name $KEYVAULT_NAME
az keyvault secret delete --name SPRING-DATASOURCE-USERNAME --vault-name $KEYVAULT_NAME
az keyvault secret delete --name SPRING-DATASOURCE-PASSWORD --vault-name $KEYVAULT_NAME

GIT_PAT=<your PAT>
az keyvault secret set \
    --name GIT-PAT \
    --value $GIT_PAT \
    --vault-name $KEYVAULT_NAME

#Setting up workload identity part
# https://learn.microsoft.com/en-us/azure/aks/workload-identity-deploy-cluster
az aks update --enable-oidc-issuer --enable-workload-identity --name $AKSCLUSTER --resource-group $RESOURCE_GROUP

export AKS_OIDC_ISSUER="$(az aks show -n $AKSCLUSTER -g $RESOURCE_GROUP --query "oidcIssuerProfile.issuerUrl" -otsv)"
echo $AKS_OIDC_ISSUER

USER_ASSIGNED_IDENTITY_NAME=uid-$APPNAME-$UNIQUEID

az identity create --name "${USER_ASSIGNED_IDENTITY_NAME}" --resource-group "${RESOURCE_GROUP}" --location "${LOCATION}"

az identity show --resource-group "${RESOURCE_GROUP}" --name "${USER_ASSIGNED_IDENTITY_NAME}"
USER_ASSIGNED_CLIENT_ID="$(az identity show --resource-group "${RESOURCE_GROUP}" --name "${USER_ASSIGNED_IDENTITY_NAME}" --query 'clientId' -otsv)"
echo $USER_ASSIGNED_CLIENT_ID

SERVICE_ACCOUNT_NAME="workload-identity-sa"

cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    azure.workload.identity/client-id: "${USER_ASSIGNED_CLIENT_ID}"
  name: "${SERVICE_ACCOUNT_NAME}"
  namespace: "${NAMESPACE}"
EOF

FEDERATED_IDENTITY_CREDENTIAL_NAME=fedid-$APPNAME-$UNIQUEID

az identity federated-credential create --name ${FEDERATED_IDENTITY_CREDENTIAL_NAME} --identity-name "${USER_ASSIGNED_IDENTITY_NAME}" --resource-group "${RESOURCE_GROUP}" --issuer "${AKS_OIDC_ISSUER}" --subject system:serviceaccount:"${NAMESPACE}":"${SERVICE_ACCOUNT_NAME}" --audience api://AzureADTokenExchange


#Still needed
az aks enable-addons --addons azure-keyvault-secrets-provider --name $AKSCLUSTER --resource-group $RESOURCE_GROUP

kubectl get pods -n kube-system

#Can go
#MANAGED_RESOURCE_GROUP=$(az aks show -g $RESOURCE_GROUP -n $AKSCLUSTER --query nodeResourceGroup --output tsv)
#NODE_POOL_NAME=$(az vmss list -g $MANAGED_RESOURCE_GROUP --query [].name --output tsv)
#CLIENT_ID=$(az vmss identity show -g $MANAGED_RESOURCE_GROUP  -n $NODE_POOL_NAME --query "userAssignedIdentities.*.clientId | [1]" -o tsv)

#Need to change to WI clientID
#az keyvault set-policy -g $RESOURCE_GROUP -n $KEYVAULT_NAME --key-permissions get --spn $CLIENT_ID
#az keyvault set-policy -g $RESOURCE_GROUP -n $KEYVAULT_NAME --secret-permissions get --spn $CLIENT_ID
#az keyvault set-policy -g $RESOURCE_GROUP -n $KEYVAULT_NAME --certificate-permissions get --spn $CLIENT_ID

az keyvault set-policy -g $RESOURCE_GROUP -n $KEYVAULT_NAME --key-permissions get --spn $USER_ASSIGNED_CLIENT_ID
az keyvault set-policy -g $RESOURCE_GROUP -n $KEYVAULT_NAME --secret-permissions get --spn $USER_ASSIGNED_CLIENT_ID
az keyvault set-policy -g $RESOURCE_GROUP -n $KEYVAULT_NAME --certificate-permissions get --spn $USER_ASSIGNED_CLIENT_ID

ADTENANT=$(az account show --query tenantId --output tsv)
echo $ADTENANT

#Updated to only use gitpatsecret
cat <<EOF | kubectl apply -n spring-petclinic -f -
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: azure-kvname-user-msi
spec:
  provider: azure
  secretObjects:
  - secretName: gitpatsecret
    type: Opaque
    data: 
    - objectName: gitpat
      key: gitpat
  parameters:
    usePodIdentity: "false"
    useVMManagedIdentity: "false" 
    clientID: $USER_ASSIGNED_CLIENT_ID 
    keyvaultName: $KEYVAULT_NAME
    cloudName: "" 
    objects: |
      array: 
        - |
          objectName: GIT-PAT
          objectType: secret   
          objectAlias: gitpat          
          objectVersion: ""  
    tenantId: $ADTENANT
EOF

cd src

mvn clean package -DskipTests -rf :spring-petclinic-config-server

cd staging-acr
rm spring-petclinic-config-server-$VERSION.jar
cp ../spring-petclinic-config-server/target/spring-petclinic-config-server-$VERSION.jar spring-petclinic-config-server-$VERSION.jar
   
az acr build \
    --resource-group $RESOURCE_GROUP \
    --registry $MYACR \
    --image spring-petclinic-config-server:$VERSION \
    --build-arg ARTIFACT_NAME=spring-petclinic-config-server-$VERSION.jar \
    --build-arg APP_PORT=8888 \
    --build-arg AI_JAR=ai.jar \
    .

cd ../kubernetes/
kubectl apply -f spring-petclinic-config-server.yml 
kubectl get pods -w

kubectl logs config-server-cb67b757d-x8477

# removed secrets from customers visits and vets ... these steps and the volumes/volumemounts should not be needed anymore (for now)
# added serviceaccount and label though
kubectl apply -f spring-petclinic-customers-service.yml
kubectl apply -f spring-petclinic-visits-service.yml
kubectl apply -f spring-petclinic-vets-service.yml

kubectl get secrets -n spring-petclinic

kubectl describe pod config-server-647d869ff8-7fjz4 -n spring-petclinic

kubectl logs visits-service-5d655d9648-wzgdh -n spring-petclinic -f

kubectl exec -it config-server-cb67b757d-x8477  -n spring-petclinic -- env 

#passwordless to db
az extension add --name serviceconnector-passwordless --upgrade

UID_ID="$(az identity show --resource-group "${RESOURCE_GROUP}" --name "${USER_ASSIGNED_IDENTITY_NAME}" --query id -otsv)"
echo $UID_ID
echo ${USER_ASSIGNED_IDENTITY_NAME}

# This should be the client ID I had before and NOT the UID_ID
# I need 2 MI's, one for workload identity, one for mysql 
# AAD admin === logged in user
# + AAD user managed ID
az connection create mysql-flexible \
       --resource-group $RESOURCE_GROUP \
       --connection mysql_conn \
       --target-resource-group $RESOURCE_GROUP \
       --server $MYSQL_SERVER_NAME \
       --database $DATABASE_NAME \
       --user-account mysql-identity-id=$UID_ID \
       --query authInfo.userName \
       --output tsv

az connection show --resource-group $RESOURCE_GROUP  --connection mysql_conn 

#changed com.azure.spring in main pom to 4.8.0
mvn clean package -DskipTests -rf :spring-petclinic-customers-service

#AZ_MYSQL_AD_NON_ADMIN_USERID=$(az ad signed-in-user show --query id -o tsv)
#echo $AZ_MYSQL_AD_NON_ADMIN_USERID

az mysql flexible-server connect -n $MYSQL_SERVER_NAME -u myadmin -p $MYSQL_ADMIN_PASSWORD --interactive
# SET aad_auth_validate_oids_in_tenant = OFF;
# SELECT User FROM mysql.user;
# GRANT ALL PRIVILEGES ON petclinic.* TO 'aad_mysql_conn'@'%';
# FLUSH privileges;

USER_ASSIGNED_ID="$(az identity show --resource-group "${RESOURCE_GROUP}" --name "${USER_ASSIGNED_IDENTITY_NAME}" --query 'id' -otsv)"
echo $USER_ASSIGNED_ID

USER_ASSIGNED_PRINCIPAL_ID="$(az identity show --resource-group "${RESOURCE_GROUP}" --name "${USER_ASSIGNED_IDENTITY_NAME}" --query 'principalId' -otsv)"
echo $USER_ASSIGNED_PRINCIPAL_ID
#clientID!!!!

cat << EOF > create_ad_user.sql
SET aad_auth_validate_oids_in_tenant = OFF;
CREATE AADUSER 'mysql_conn2' IDENTIFIED BY '$USER_ASSIGNED_PRINCIPAL_ID';
GRANT ALL PRIVILEGES ON petclinic.* TO 'mysql_conn2'@'%';
FLUSH privileges;
EOF

mysql -h $MYSQL_SERVER_NAME.mysql.database.azure.com --user givermei@microsoft.com --enable-cleartext-plugin --password=$(az account get-access-token --resource-type oss-rdbms --output tsv --query accessToken) < create_ad_user.sql

show databases
use petclinic
show tables
select * from owners


mvn clean package -DskipTests -rf :spring-petclinic-vets-service
mvn clean package -DskipTests -rf :spring-petclinic-customers-service

cd staging-acr

cp ../spring-petclinic-vets-service/target/spring-petclinic-vets-service-$VERSION.jar spring-petclinic-vets-service-$VERSION.jar

az acr build \
    --resource-group $RESOURCE_GROUP \
    --registry $MYACR \
    --image spring-petclinic-vets-service:$VERSION \
    --build-arg ARTIFACT_NAME=spring-petclinic-vets-service-$VERSION.jar \
    --build-arg APP_PORT=8080 \
    --build-arg AI_JAR=ai.jar \
    .

rm spring-petclinic-customers-service-$VERSION.jar
   
cp ../spring-petclinic-customers-service/target/spring-petclinic-customers-service-$VERSION.jar spring-petclinic-customers-service-$VERSION.jar
az acr build \
    --resource-group $RESOURCE_GROUP \
    --registry $MYACR \
    --image spring-petclinic-customers-service:$VERSION \
    --build-arg ARTIFACT_NAME=spring-petclinic-customers-service-$VERSION.jar \
    --build-arg APP_PORT=8080 \
    --build-arg AI_JAR=ai.jar \
    .

kubectl logs vets-service-67576559f8-xhj7j

kubectl logs customers-service-db7cfdb55-6vnv5

kubectl logs config-server-6d77897f64-6nzmt

